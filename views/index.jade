div#paypalIndex.
  <script src="https://www.paypal.com/sdk/js?client-id=#{client_id}&currency=#{currency}!{buyer_country_param}!{locale_param}!{merchant_id_param}">
  </script> 

  <h1><a href="https://developer.paypal.com/docs/checkout/" target="_blank">PayPal Checkout</a></h1>

  <a href="https://github.com/paypal/paypal-checkout-components" target="_blank">JavaScript SDK GitHub</a>
  <br/>
  <a href="https://github.com/paypal/Checkout-Nodejs-SDK/" target="_blank">Server Node SDK Github</a>
  <br/>
  <br/>
  
  <a href="https://developer.paypal.com/docs/api/orders/v2/" target="_blank">Order API</a>
  <br/>
  <a href="https://developer.paypal.com/docs/api/payments/v2/" target="_blank">Payment API</a>
  <br/>
  <br/>
  <a href="https://github.com/benzookapi/PayPalBraintreeNodeDemo" target="_blank">Source Code</a>
  <br/>

  <h2>BASIC INTEGRATION</h2>
  The button size needs set as its container style sheet.
  <div style="border: 1px solid gray; padding: 10px; width: 300px;">   
    <div id="paypal-button-container"></div>
  </div>

  <script>
    // Basic integration
    paypal.Buttons({
      style: {
        layout:  'vertical',
        color:   'gold',
        shape:   'rect',
        label:   'paypal'
      },
      createOrder: function(data, actions) {
        return actions.order.create({
          purchase_units: [{
            amount: {
              value: '1000',
              breakdown: {
                item_total: {
                  currency_code: "#{currency}",
                  value: '1000'
                }
              }
            },
            items: [{
              name: "サンプル商品",
              unit_amount: {
                currency_code: "#{currency}",
                value: '1000'
              },
              quantity: '1'
            }],
            shipping: {
              name: {
                full_name: "Shipping太郎 ペイパル"
              },
              address: {
                address_line_1: "Shipping 住所１",
                address_line_2: "Shipping 住所２",
                admin_area_2: "港区",
                admin_area_1: "東京都",
                postal_code: "1234567",
                country_code: "JP"
              }
            }
          }]/*,
          payer: {
              name: {
                given_name: "Payer Given Name",
                surname: "Payer Surname"
              },
              email_address: "benzookapi-buyer_payer@mail.com",
              phone: {
                phone_type: "MOBILE",
                phone_number: {
                  national_number: "818012345678"
                }
              },
              birth_date: "1980-01-01",
              address: {
                address_line_1: "Payer 住所１",
                address_line_2: "Payer 住所２",
                admin_area_2: "港区",
                admin_area_1: "東京都",
                postal_code: "1234567",
                country_code: "JP"
              }
          },
          application_context: {
            landing_page: 'BILLING',
            brand_name: "BENZO CHECKOUT"            
          }*/
        });
      },
      onApprove: function(data, actions) {
        // Capture the funds from the transaction
        return actions.order.capture().then(function(details) {
          // Show a success message to your buyer
          //alert('Transaction completed by ' + details.payer.name.given_name);
          console.log("data: \n " + JSON.stringify(data, null, 4));     
          console.log("details: \n " + JSON.stringify(details, null, 4));      

          // Call your server to save the transaction
          return fetch('/verifyorder', {
            method: 'POST',
            body: JSON.stringify({orderID: data.orderID}),
            headers : new Headers({"Content-type" : "application/json"})
          }).then(function(res) {
            return res.text();
          }).then(function(data) {
            document.getElementById('res').innerHTML = data;
          });
        });
      },
      onCancel: function (data) {
        // Show a cancel page, or return to cart
        alert("Canceled!");
      },
      onError: function (err) {
        // Show an error page here, when an error occurs
        console.log("err: \n " + JSON.stringify(err, null, 4));
        alert("Error!");
      }
    }).render('#paypal-button-container');
  </script>

  <h2>SERVER INTEGRATION</h2>
  The button size needs set as its container style sheet.
  <div style="border: 1px solid gray; padding: 10px; width: 300px;">    
    <div id="paypal-button-container-server"></div>
  </div>

  <script>
    // Server integration
    paypal.Buttons({
      style: {
        layout:  'vertical',
        color:   'gold',
        shape:   'rect',
        label:   'paypal'
      },
      createOrder: function() {
        return fetch('/createorder', {
          method: "POST"
        }).then(function(res) {
          return res.json();
        }).then(function(data) {
          return data.orderID;
        });
      },
      onApprove: function(data) {
        return fetch('/captureorder', {
          method: "POST",
          body: JSON.stringify({orderID: data.orderID}),
          headers : new Headers({"Content-type" : "application/json"})
        }).then(function(res) {
          return res.text();
        }).then(function(data) {          
          document.getElementById('res').innerHTML = data;     
        });
      },
      onCancel: function (data) {
        // Show a cancel page, or return to cart
        alert("Canceled!");
      },
      onError: function (err) {
        // Show an error page here, when an error occurs
        console.log("err: \n " + JSON.stringify(err, null, 4));
        alert("Error!");
      }
    }).render('#paypal-button-container-server');
  </script>

  <br/>
  <div id="res"></div>

  <br/>
  <br/>
  <br/> 
  <a href="/simple">Simple Integration</a> 
  <br/>
  <br/>
  <br/> 
  <br/>
  <br/>
  <br/> 
  <a href="/old2">Old Integration</a>
  
  
